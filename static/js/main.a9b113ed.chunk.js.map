{"version":3,"sources":["component/card/card.component.jsx","logo.svg","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","monster","name","alt","src","id","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAIaA,GCJE,I,4BDIK,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,mCAAOD,EAAME,QAAQC,QACrB,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAAME,QAAQI,GAAxC,iCEHjBC,EAAW,SAAAP,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCJfI,G,OAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACrB,uBACAX,UAAY,SACZY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CCG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAa,IALH,E,gEAWM,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAASkB,S,+BASlC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQC,KAAK2B,cAAcC,SAASb,EAAYY,kBACnD,OACE,sBAAK7B,UAAU,MAAf,UACE,oBAAIK,GAAG,UAAP,gCACA,cAAC,EAAD,CACAK,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a9b113ed.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n\nexport const Card = props => (\n    <div className='card-container'>\n        <h1 > {props.monster.name}</h1>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n    </div>\n)","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n         <Card key={monster.id} monster={monster}/> \n         ))}\n   </div>\n)","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder,handleChange}) =>(\n    <input \n    className = 'search'\n    type='search' \n    placeholder={placeholder} \n    onChange={handleChange} \n    />\n)","import logo from './logo.svg';\nimport React, {Component} from 'react';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox } from './component/search-box/search-box.component'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters:[],\n      searchField: ''\n        \n    };\n    \n  }\n//sert Ã  dowload le data d'un json et set le state du json\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters:users }));\n\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value})\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state; \n    const filteredMonsters = monsters.filter(monster =>\n       monster.name.toLowerCase().includes(searchField.toLowerCase())) \n    return (\n      <div className=\"App\">\n        <h1 id='manwork'> Monsters Rolodex </h1>\n        <SearchBox\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList> \n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}